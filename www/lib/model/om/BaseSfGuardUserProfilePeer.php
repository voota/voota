<?php

/**
 * Base static class for performing query and update operations on the 'sf_guard_user_profile' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Tue May  4 21:02:30 2010
 *
 * @package    lib.model.om
 */
abstract class BaseSfGuardUserProfilePeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'sf_guard_user_profile';

	/** the related Propel class for this table */
	const OM_CLASS = 'SfGuardUserProfile';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.SfGuardUserProfile';

	/** the related TableMap class for this table */
	const TM_CLASS = 'SfGuardUserProfileTableMap';
	
	/** The total number of columns. */
	const NUM_COLUMNS = 26;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ID field */
	const ID = 'sf_guard_user_profile.ID';

	/** the column name for the USER_ID field */
	const USER_ID = 'sf_guard_user_profile.USER_ID';

	/** the column name for the NOMBRE field */
	const NOMBRE = 'sf_guard_user_profile.NOMBRE';

	/** the column name for the APELLIDOS field */
	const APELLIDOS = 'sf_guard_user_profile.APELLIDOS';

	/** the column name for the FECHA_NACIMIENTO field */
	const FECHA_NACIMIENTO = 'sf_guard_user_profile.FECHA_NACIMIENTO';

	/** the column name for the PAIS field */
	const PAIS = 'sf_guard_user_profile.PAIS';

	/** the column name for the FORMACION field */
	const FORMACION = 'sf_guard_user_profile.FORMACION';

	/** the column name for the RESIDENCIA field */
	const RESIDENCIA = 'sf_guard_user_profile.RESIDENCIA';

	/** the column name for the PRESENTACION field */
	const PRESENTACION = 'sf_guard_user_profile.PRESENTACION';

	/** the column name for the CREATED_AT field */
	const CREATED_AT = 'sf_guard_user_profile.CREATED_AT';

	/** the column name for the VANITY field */
	const VANITY = 'sf_guard_user_profile.VANITY';

	/** the column name for the IMAGEN field */
	const IMAGEN = 'sf_guard_user_profile.IMAGEN';

	/** the column name for the CODIGO field */
	const CODIGO = 'sf_guard_user_profile.CODIGO';

	/** the column name for the PAPEL_VOOTA field */
	const PAPEL_VOOTA = 'sf_guard_user_profile.PAPEL_VOOTA';

	/** the column name for the MAILS_COMENTARIOS field */
	const MAILS_COMENTARIOS = 'sf_guard_user_profile.MAILS_COMENTARIOS';

	/** the column name for the MAILS_NOTICIAS field */
	const MAILS_NOTICIAS = 'sf_guard_user_profile.MAILS_NOTICIAS';

	/** the column name for the MAILS_CONTACTO field */
	const MAILS_CONTACTO = 'sf_guard_user_profile.MAILS_CONTACTO';

	/** the column name for the MAILS_SEGUIDOR field */
	const MAILS_SEGUIDOR = 'sf_guard_user_profile.MAILS_SEGUIDOR';

	/** the column name for the NUMERO_SOCIO field */
	const NUMERO_SOCIO = 'sf_guard_user_profile.NUMERO_SOCIO';

	/** the column name for the FACEBOOK_UID field */
	const FACEBOOK_UID = 'sf_guard_user_profile.FACEBOOK_UID';

	/** the column name for the EMAIL field */
	const EMAIL = 'sf_guard_user_profile.EMAIL';

	/** the column name for the EMAIL_HASH field */
	const EMAIL_HASH = 'sf_guard_user_profile.EMAIL_HASH';

	/** the column name for the FB_PUBLISH_VOTOS field */
	const FB_PUBLISH_VOTOS = 'sf_guard_user_profile.FB_PUBLISH_VOTOS';

	/** the column name for the FB_PUBLISH_VOTOS_OTROS field */
	const FB_PUBLISH_VOTOS_OTROS = 'sf_guard_user_profile.FB_PUBLISH_VOTOS_OTROS';

	/** the column name for the FB_PUBLISH_CAMBIOS_PERFIL field */
	const FB_PUBLISH_CAMBIOS_PERFIL = 'sf_guard_user_profile.FB_PUBLISH_CAMBIOS_PERFIL';

	/** the column name for the FB_TIP field */
	const FB_TIP = 'sf_guard_user_profile.FB_TIP';

	/**
	 * An identiy map to hold any loaded instances of SfGuardUserProfile objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array SfGuardUserProfile[]
	 */
	public static $instances = array();


	// symfony behavior
	
	/**
	 * Indicates whether the current model includes I18N.
	 */
	const IS_I18N = false;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Id', 'UserId', 'Nombre', 'Apellidos', 'FechaNacimiento', 'Pais', 'Formacion', 'Residencia', 'Presentacion', 'CreatedAt', 'Vanity', 'Imagen', 'Codigo', 'PapelVoota', 'MailsComentarios', 'MailsNoticias', 'MailsContacto', 'MailsSeguidor', 'NumeroSocio', 'FacebookUid', 'Email', 'EmailHash', 'FbPublishVotos', 'FbPublishVotosOtros', 'FbPublishCambiosPerfil', 'FbTip', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'userId', 'nombre', 'apellidos', 'fechaNacimiento', 'pais', 'formacion', 'residencia', 'presentacion', 'createdAt', 'vanity', 'imagen', 'codigo', 'papelVoota', 'mailsComentarios', 'mailsNoticias', 'mailsContacto', 'mailsSeguidor', 'numeroSocio', 'facebookUid', 'email', 'emailHash', 'fbPublishVotos', 'fbPublishVotosOtros', 'fbPublishCambiosPerfil', 'fbTip', ),
		BasePeer::TYPE_COLNAME => array (self::ID, self::USER_ID, self::NOMBRE, self::APELLIDOS, self::FECHA_NACIMIENTO, self::PAIS, self::FORMACION, self::RESIDENCIA, self::PRESENTACION, self::CREATED_AT, self::VANITY, self::IMAGEN, self::CODIGO, self::PAPEL_VOOTA, self::MAILS_COMENTARIOS, self::MAILS_NOTICIAS, self::MAILS_CONTACTO, self::MAILS_SEGUIDOR, self::NUMERO_SOCIO, self::FACEBOOK_UID, self::EMAIL, self::EMAIL_HASH, self::FB_PUBLISH_VOTOS, self::FB_PUBLISH_VOTOS_OTROS, self::FB_PUBLISH_CAMBIOS_PERFIL, self::FB_TIP, ),
		BasePeer::TYPE_FIELDNAME => array ('id', 'user_id', 'nombre', 'apellidos', 'fecha_nacimiento', 'pais', 'formacion', 'residencia', 'presentacion', 'created_at', 'vanity', 'imagen', 'codigo', 'papel_voota', 'mails_comentarios', 'mails_noticias', 'mails_contacto', 'mails_seguidor', 'numero_socio', 'facebook_uid', 'email', 'email_hash', 'fb_publish_votos', 'fb_publish_votos_otros', 'fb_publish_cambios_perfil', 'fb_tip', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'UserId' => 1, 'Nombre' => 2, 'Apellidos' => 3, 'FechaNacimiento' => 4, 'Pais' => 5, 'Formacion' => 6, 'Residencia' => 7, 'Presentacion' => 8, 'CreatedAt' => 9, 'Vanity' => 10, 'Imagen' => 11, 'Codigo' => 12, 'PapelVoota' => 13, 'MailsComentarios' => 14, 'MailsNoticias' => 15, 'MailsContacto' => 16, 'MailsSeguidor' => 17, 'NumeroSocio' => 18, 'FacebookUid' => 19, 'Email' => 20, 'EmailHash' => 21, 'FbPublishVotos' => 22, 'FbPublishVotosOtros' => 23, 'FbPublishCambiosPerfil' => 24, 'FbTip' => 25, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'userId' => 1, 'nombre' => 2, 'apellidos' => 3, 'fechaNacimiento' => 4, 'pais' => 5, 'formacion' => 6, 'residencia' => 7, 'presentacion' => 8, 'createdAt' => 9, 'vanity' => 10, 'imagen' => 11, 'codigo' => 12, 'papelVoota' => 13, 'mailsComentarios' => 14, 'mailsNoticias' => 15, 'mailsContacto' => 16, 'mailsSeguidor' => 17, 'numeroSocio' => 18, 'facebookUid' => 19, 'email' => 20, 'emailHash' => 21, 'fbPublishVotos' => 22, 'fbPublishVotosOtros' => 23, 'fbPublishCambiosPerfil' => 24, 'fbTip' => 25, ),
		BasePeer::TYPE_COLNAME => array (self::ID => 0, self::USER_ID => 1, self::NOMBRE => 2, self::APELLIDOS => 3, self::FECHA_NACIMIENTO => 4, self::PAIS => 5, self::FORMACION => 6, self::RESIDENCIA => 7, self::PRESENTACION => 8, self::CREATED_AT => 9, self::VANITY => 10, self::IMAGEN => 11, self::CODIGO => 12, self::PAPEL_VOOTA => 13, self::MAILS_COMENTARIOS => 14, self::MAILS_NOTICIAS => 15, self::MAILS_CONTACTO => 16, self::MAILS_SEGUIDOR => 17, self::NUMERO_SOCIO => 18, self::FACEBOOK_UID => 19, self::EMAIL => 20, self::EMAIL_HASH => 21, self::FB_PUBLISH_VOTOS => 22, self::FB_PUBLISH_VOTOS_OTROS => 23, self::FB_PUBLISH_CAMBIOS_PERFIL => 24, self::FB_TIP => 25, ),
		BasePeer::TYPE_FIELDNAME => array ('id' => 0, 'user_id' => 1, 'nombre' => 2, 'apellidos' => 3, 'fecha_nacimiento' => 4, 'pais' => 5, 'formacion' => 6, 'residencia' => 7, 'presentacion' => 8, 'created_at' => 9, 'vanity' => 10, 'imagen' => 11, 'codigo' => 12, 'papel_voota' => 13, 'mails_comentarios' => 14, 'mails_noticias' => 15, 'mails_contacto' => 16, 'mails_seguidor' => 17, 'numero_socio' => 18, 'facebook_uid' => 19, 'email' => 20, 'email_hash' => 21, 'fb_publish_votos' => 22, 'fb_publish_votos_otros' => 23, 'fb_publish_cambios_perfil' => 24, 'fb_tip' => 25, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, )
	);

	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. SfGuardUserProfilePeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(SfGuardUserProfilePeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{
		$criteria->addSelectColumn(SfGuardUserProfilePeer::ID);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::USER_ID);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::NOMBRE);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::APELLIDOS);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::FECHA_NACIMIENTO);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::PAIS);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::FORMACION);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::RESIDENCIA);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::PRESENTACION);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::CREATED_AT);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::VANITY);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::IMAGEN);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::CODIGO);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::PAPEL_VOOTA);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::MAILS_COMENTARIOS);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::MAILS_NOTICIAS);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::MAILS_CONTACTO);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::MAILS_SEGUIDOR);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::NUMERO_SOCIO);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::FACEBOOK_UID);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::EMAIL);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::EMAIL_HASH);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::FB_PUBLISH_VOTOS);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::FB_PUBLISH_VOTOS_OTROS);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::FB_PUBLISH_CAMBIOS_PERFIL);
		$criteria->addSelectColumn(SfGuardUserProfilePeer::FB_TIP);
	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(SfGuardUserProfilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			SfGuardUserProfilePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(SfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseSfGuardUserProfilePeer', $criteria, $con);
		}

		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     SfGuardUserProfile
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = SfGuardUserProfilePeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return SfGuardUserProfilePeer::populateObjects(SfGuardUserProfilePeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(SfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			SfGuardUserProfilePeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      SfGuardUserProfile $value A SfGuardUserProfile object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(SfGuardUserProfile $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A SfGuardUserProfile object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof SfGuardUserProfile) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or SfGuardUserProfile object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     SfGuardUserProfile Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Method to invalidate the instance pool of all tables related to sf_guard_user_profile
	 * by a foreign key with ON DELETE CASCADE
	 */
	public static function clearRelatedInstancePool()
	{
	}

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol] === null) {
			return null;
		}
		return (string) $row[$startcol];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = SfGuardUserProfilePeer::getOMClass(false);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = SfGuardUserProfilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = SfGuardUserProfilePeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				SfGuardUserProfilePeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related sfGuardUser table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinsfGuardUser(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(SfGuardUserProfilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			SfGuardUserProfilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(SfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(SfGuardUserProfilePeer::USER_ID, sfGuardUserPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseSfGuardUserProfilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of SfGuardUserProfile objects pre-filled with their sfGuardUser objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of SfGuardUserProfile objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinsfGuardUser(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		SfGuardUserProfilePeer::addSelectColumns($criteria);
		$startcol = (SfGuardUserProfilePeer::NUM_COLUMNS - SfGuardUserProfilePeer::NUM_LAZY_LOAD_COLUMNS);
		sfGuardUserPeer::addSelectColumns($criteria);

		$criteria->addJoin(SfGuardUserProfilePeer::USER_ID, sfGuardUserPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseSfGuardUserProfilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = SfGuardUserProfilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = SfGuardUserProfilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = SfGuardUserProfilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				SfGuardUserProfilePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = sfGuardUserPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = sfGuardUserPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = sfGuardUserPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					sfGuardUserPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded
				
				// Add the $obj1 (SfGuardUserProfile) to $obj2 (sfGuardUser)
				$obj2->addSfGuardUserProfile($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(SfGuardUserProfilePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			SfGuardUserProfilePeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(SfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(SfGuardUserProfilePeer::USER_ID, sfGuardUserPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseSfGuardUserProfilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of SfGuardUserProfile objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of SfGuardUserProfile objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		SfGuardUserProfilePeer::addSelectColumns($criteria);
		$startcol2 = (SfGuardUserProfilePeer::NUM_COLUMNS - SfGuardUserProfilePeer::NUM_LAZY_LOAD_COLUMNS);

		sfGuardUserPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (sfGuardUserPeer::NUM_COLUMNS - sfGuardUserPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(SfGuardUserProfilePeer::USER_ID, sfGuardUserPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseSfGuardUserProfilePeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = SfGuardUserProfilePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = SfGuardUserProfilePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = SfGuardUserProfilePeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				SfGuardUserProfilePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined sfGuardUser rows

			$key2 = sfGuardUserPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = sfGuardUserPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = sfGuardUserPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					sfGuardUserPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (SfGuardUserProfile) to the collection in $obj2 (sfGuardUser)
				$obj2->addSfGuardUserProfile($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * Add a TableMap instance to the database for this peer class.
	 */
	public static function buildTableMap()
	{
	  $dbMap = Propel::getDatabaseMap(BaseSfGuardUserProfilePeer::DATABASE_NAME);
	  if (!$dbMap->hasTable(BaseSfGuardUserProfilePeer::TABLE_NAME))
	  {
	    $dbMap->addTableObject(new SfGuardUserProfileTableMap());
	  }
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * If $withPrefix is true, the returned path
	 * uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @param      boolean  Whether or not to return the path wit hthe class name 
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass($withPrefix = true)
	{
		return $withPrefix ? SfGuardUserProfilePeer::CLASS_DEFAULT : SfGuardUserProfilePeer::OM_CLASS;
	}

	/**
	 * Method perform an INSERT on the database, given a SfGuardUserProfile or Criteria object.
	 *
	 * @param      mixed $values Criteria or SfGuardUserProfile object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseSfGuardUserProfilePeer:doInsert:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseSfGuardUserProfilePeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(SfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from SfGuardUserProfile object
		}

		if ($criteria->containsKey(SfGuardUserProfilePeer::ID) && $criteria->keyContainsValue(SfGuardUserProfilePeer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.SfGuardUserProfilePeer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseSfGuardUserProfilePeer:doInsert:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseSfGuardUserProfilePeer', $values, $con, $pk);
    }

		return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a SfGuardUserProfile or Criteria object.
	 *
	 * @param      mixed $values Criteria or SfGuardUserProfile object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseSfGuardUserProfilePeer:doUpdate:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseSfGuardUserProfilePeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(SfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(SfGuardUserProfilePeer::ID);
			$selectCriteria->add(SfGuardUserProfilePeer::ID, $criteria->remove(SfGuardUserProfilePeer::ID), $comparison);

		} else { // $values is SfGuardUserProfile object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseSfGuardUserProfilePeer:doUpdate:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseSfGuardUserProfilePeer', $values, $con, $ret);
    }

    return $ret;
	}

	/**
	 * Method to DELETE all rows from the sf_guard_user_profile table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(SfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(SfGuardUserProfilePeer::TABLE_NAME, $con);
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			SfGuardUserProfilePeer::clearInstancePool();
			SfGuardUserProfilePeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a SfGuardUserProfile or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or SfGuardUserProfile object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(SfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			SfGuardUserProfilePeer::clearInstancePool();
			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof SfGuardUserProfile) { // it's a model object
			// invalidate the cache for this single object
			SfGuardUserProfilePeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else { // it's a primary key, or an array of pks
			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(SfGuardUserProfilePeer::ID, (array) $values, Criteria::IN);
			// invalidate the cache for this object(s)
			foreach ((array) $values as $singleval) {
				SfGuardUserProfilePeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);
			SfGuardUserProfilePeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given SfGuardUserProfile object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      SfGuardUserProfile $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(SfGuardUserProfile $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(SfGuardUserProfilePeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(SfGuardUserProfilePeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		return BasePeer::doValidate(SfGuardUserProfilePeer::DATABASE_NAME, SfGuardUserProfilePeer::TABLE_NAME, $columns);
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     SfGuardUserProfile
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = SfGuardUserProfilePeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(SfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		$criteria->add(SfGuardUserProfilePeer::ID, $pk);

		$v = SfGuardUserProfilePeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(SfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
			$criteria->add(SfGuardUserProfilePeer::ID, $pks, Criteria::IN);
			$objs = SfGuardUserProfilePeer::doSelect($criteria, $con);
		}
		return $objs;
	}

	// symfony behavior
	
	/**
	 * Returns an array of arrays that contain columns in each unique index.
	 *
	 * @return array
	 */
	static public function getUniqueColumnNames()
	{
	  return array(array('vanity'));
	}

	// symfony_behaviors behavior
	
	/**
	 * Returns the name of the hook to call from inside the supplied method.
	 *
	 * @param string $method The calling method
	 *
	 * @return string A hook name for {@link sfMixer}
	 *
	 * @throws LogicException If the method name is not recognized
	 */
	static private function getMixerPreSelectHook($method)
	{
	  if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
	  {
	    return sprintf('BaseSfGuardUserProfilePeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
	  }
	
	  throw new LogicException(sprintf('Unrecognized function "%s"', $method));
	}

} // BaseSfGuardUserProfilePeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseSfGuardUserProfilePeer::buildTableMap();

